import argparse
import gzip
import json
import pandas as pd
import plotly.express as px
import os


def drawAccuracies(data, outputFileName):
    accuracies = pd.DataFrame(
        data = [[k, k2, v2[1]/v2[0]] for k, v in data["accuracies"].items() for k2, v2 in v.items()],
        columns = ["Model size", "Text size", "Accuracy"])
    fig = px.scatter_3d(
        accuracies,
        x="Model size",
        y="Text size",
        z="Accuracy",
        color="Text size",
        title="Accuracy per model and text size")
    try:
        os.makedirs(os.path.dirname(outputFileName), exist_ok=True)
    except:
        pass
    fig.write_html(outputFileName)


def drawIntervals(data, textName, modelSize, windowSize, threshold, outputFileName, maxModels):
    intervals = pd.DataFrame(
        data = [[modelName, modelName, interval[0], interval[1], interval[1]-interval[0], sum(bytearray(modelName.encode("utf-8")))]
                for modelName, intervalData in data["intervals"][modelSize][textName]["calculated"][windowSize][threshold].items() for interval in intervalData[0]],
        columns = ["Model", "Group", "Start", "End", "Delta", "Color"])
    intervals = intervals[intervals["Group"].isin(intervals.groupby("Group")["Delta"].sum().nlargest(maxModels).index.tolist())].sort_values("Start", ascending=True)
    intervals = intervals.append([{"Model": modelName, "Group": "Expected", "Start": interval[0], "End": interval[1], "Delta": interval[1]-interval[0], "Color": sum(bytearray(modelName.encode("utf-8")))}
                for modelName, interval in data["intervals"][modelSize][textName]["expected"].items()], ignore_index=True)
    fig = px.timeline(
        intervals,
        x_start="Start",
        x_end="End",
        y="Group",
        color="Color",
        title=f"Model size: {modelSize}, Window size: {windowSize}, Threshold: {threshold}, File: {textName}",
        hover_data=["Model", "Start", "End", "Delta"],
        color_continuous_scale=[color for _, values in px.colors.qualitative._contents.items() if isinstance(values, list) for color in values])
    fig.layout.xaxis.type = "linear"
    fig.data[0].x = intervals.Delta.tolist()
    fig.layout.yaxis.autorange = "reversed"
    try:
        os.makedirs(os.path.dirname(outputFileName), exist_ok=True)
    except:
        pass
    fig.write_html(outputFileName)


def main(fileName, accuraciesPrefix, intervalsPrevix, modelSizes, windowSizes, thresholds, maxModels, fileIndex):
    with gzip.open(fileName, "r") as file:
        data = json.load(file)
        drawAccuracies(data, f"{accuraciesPrefix}.html")
        textName = list(data["intervals"]["1.0"].keys())[fileIndex]
        for windowSize in windowSizes:
            for modelSize in modelSizes:
                for threshold in thresholds:
                    drawIntervals(
                        data,
                        textName,
                        str(modelSize),
                        str(windowSize),
                        str(threshold),
                        f"{intervalsPrevix}_{modelSize:.3f}_{windowSize}_{threshold:.3f}.html",
                        maxModels)
        

if __name__ == "__main__":
    parser= argparse.ArgumentParser()
    parser.add_argument("--data",help="File with the data for the graphs (generated by datagen.py)", required=True)
    parser.add_argument("--accuracies-prefix",help="File prefix to output the accuracies graph", required=True)
    parser.add_argument("--intervals-prefix",help="File prefix to output the intervals graphs", required=True)
    parser.add_argument("--model-sizes",help="List of model sizes to use" , type=float, nargs="+", default=[0.1, 0.5, 1.0])
    parser.add_argument("--window-sizes",help="List of window sizes to use" , type=int, nargs="+", default=[1, 20])
    parser.add_argument("--thresholds",help="List of window sizes to use" , type=float, nargs="+", default=[3.0])
    parser.add_argument("--max-models",help="Most models shown at once in the interval graph" , type=int, default=7)
    parser.add_argument("--file-index",help="Index of the file to use for the interval graphs" , type=int, default=0)
    args = parser.parse_args()
    main(args.data, args.accuracies_prefix, args.intervals_prefix, args.model_sizes, args.window_sizes, args.thresholds, args.max_models, args.file_index)